@page "/Authorization/SelectDealer"
@using Microsoft.AspNetCore.Authorization;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Models.Dealers;
@using YZPortal.Client.Models.Users;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject NavigationManager Nav
@inherits UserClaimsBase
@attribute [Authorize]

<h1>Select Subscription</h1>

<Table PageItemsSource="@PageItemsSource"
       TItem="Dealer" 
       IsPagination="true"
       IsBordered="true" 
       IsStriped="true"
       TableSize="TableSize.Compact"
       OnQueryAsync="OnQueryAsync"
       OnDoubleClickRowCallback="DoubleClickRowCallback">
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" Sortable="true" />
    </TableColumns>
</Table>

@code {
    private static IEnumerable<int> PageItemsSource => new int[] { 4, 10, 20 };
    public Dealers? Dealers { get; set; }

    private async Task<QueryData<Dealer>> OnQueryAsync(QueryPageOptions options)
    {
        var orderby = ((SortOrder)options.SortOrder == SortOrder.Unset) ? string.Empty : options.SortName + " " + options.SortOrder.ToString();

        Dealers = await YZPortalApiClient.GetDealers(pageNumber: options.PageIndex, orderBy: orderby);

        return await Task.FromResult(new QueryData<Dealer>()
            {
                Items = Dealers?.Results ?? new List<Dealer>(),
                TotalCount = Dealers?.TotalItems ?? 0,
                IsSorted = !string.IsNullOrEmpty(orderby)
            });
    }

    private async Task DoubleClickRowCallback(Dealer dealer)
    {
        UserDealerAuthorizeResult userDealerAuthorizeResult = await YZPortalApiClient.UserAuthorize(dealer.Id);

        // Redirect to the homepage if authorization is successful
        if (userDealerAuthorizeResult.IsStatusCodeSucess)
        {
            Nav.NavigateTo("/");
        }
    }
}
