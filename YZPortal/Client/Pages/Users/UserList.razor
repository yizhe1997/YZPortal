@page "/users"
@using Microsoft.AspNetCore.Authorization;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Models.Users;
@using YZPortal.Client.Pages.Users;
@using YZPortal.FullStackCore.Infrastructure.Security.Authorization
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize(Policy = Policies.IsAdmin)]

<h1>Users</h1>

<Button OnClick="@OpenInviteUserDialog" Text="Invite User" />

<Table PageItemsSource="@PageItemsSource"
       TItem="User" 
       IsPagination="true"
       IsBordered="true"
       ShowToolbar="true"
       ShowDefaultButtons="false"
       ShowExtendButtons="true"
       ClickToSelect="true"
       TableSize="TableSize.Compact"
       OnDeleteAsync="@OnDeleteAsync"
       OnQueryAsync="@OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.UserName" Sortable="true" />
        <TableColumn @bind-Field="@context.Name" Sortable="true" />
        <TableColumn @bind-Field="@context.Admin" Sortable="true" />
        <TableColumn @bind-Field="@context.LastLoggedIn" Sortable="true" FormatString="yyyy-MM-dd" />
    </TableColumns>
</Table>

@code {
    private static IEnumerable<int> PageItemsSource => new int[] { 4, 10, 20 };
    private Users? Users;

    private void OpenInviteUserDialog() => DialogService.Show(new DialogOption()
        {
            Title = "Invite User",
            Component = BootstrapDynamicComponent.CreateComponent<UserInviteDialog>()
        });

    private async Task<QueryData<User>> OnQueryAsync(QueryPageOptions options)
    {
        var orderby = ((SortOrder)options.SortOrder == SortOrder.Unset) ? string.Empty : options.SortName + " " + options.SortOrder.ToString();

        Users = await YZPortalApiClient.GetUsers(pageNumber: options.PageIndex, orderBy: orderby);

        return await Task.FromResult(new QueryData<User>()
            {
                Items = Users?.Results ?? new List<User>(),
                TotalCount = Users?.TotalItems ?? 0,
                IsSorted = !string.IsNullOrEmpty(orderby)
            });
    }

    private Task<bool> OnDeleteAsync(IEnumerable<User> items)
    {
        var idsOfDltedUsers = Users?.Results.Select(x => x.Id).ToList();
        Users?.Results.RemoveAll(p => idsOfDltedUsers.Contains(p.Id));
        return Task.FromResult(true);
    }
}