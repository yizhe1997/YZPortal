@page "/users"
@using Microsoft.AspNetCore.Authorization;
@using System.Diagnostics.CodeAnalysis;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Pages.Users;
@using YZPortal.FullStackCore.Infrastructure.Security.Authorization
@using YZPortal.FullStackCore.Models.Users;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize(Policy = Policies.Administrator)]

<h1>Users</h1>

<Table TItem="UserModel"
       IsPagination="true"
       PageItemsSource="@PageItemsSource"
       IsBordered="true"
       ShowToolbar="true"
       ShowDefaultButtons="true"
       ShowDeleteButton="true"
       ShowAddButton="false"
       ShowEditButton="false"
       ClickToSelect="true"
       ShowSearch="true"
       ShowCardView="true"
       ShowFooter="true"
       TableSize="TableSize.Normal"
       OnDeleteAsync="@OnDeleteAsync"
       OnQueryAsync="@OnQueryAsync">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="UserModel"
                            Color="Color.Primary"
                            Icon="fa-fw fa-solid fa-floppy-disk"
                            Text="Invite User"
                            OnClick="@OpenInviteUserDialog"
                                        IsAsync />
    </TableToolbarTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.UserName" Sortable="true" />
        <TableColumn @bind-Field="@context.DisplayName" Sortable="true" />
        <TableColumn @bind-Field="@context.AuthTime" Sortable="true" FormatString="yyyy-MM-dd" />
    </TableColumns>
</Table>

@code {
    private static IEnumerable<int> PageItemsSource => new int[] { 2, 4, 10 };

    private UsersSearchModel? Users;

    private void OpenInviteUserDialog() => DialogService.Show(new DialogOption()
    {
        Title = "Invite User",
        //Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(),
        Size = Size.Large,
    });

    private async Task<QueryData<UserModel>> OnQueryAsync(QueryPageOptions options)
    {
        var orderby = new List<string>();

        if (options.SortOrder != SortOrder.Unset)
        {
            orderby.Add(options.SortName + " " + options.SortOrder.ToString());
        }

        Users = await YZPortalApiClient.GetUsers(pageSize: options.PageItems, pageNumber: options.PageIndex, searchString: options.SearchText, orderBy: orderby.ToArray());

        return await Task.FromResult(new QueryData<UserModel>()
        {
            Items = Users?.Results ?? new List<UserModel>(),
            TotalCount = Users?.TotalItems ?? 0,
            IsSorted = orderby.Any(),
            IsSearch = true
        });
    }

    private async Task<bool> OnDeleteAsync(IEnumerable<UserModel> items)
    {
        var users = items.ToList();
        foreach (var user in users)
        {
            var response = await YZPortalApiClient.DeleteUser(user.Id);

            if (response.IsSuccessStatusCode)
                users.Remove(user);
        }

        return await Task.FromResult(true);
    }
}