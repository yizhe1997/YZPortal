@page "/Authentication2/Login"
@using Microsoft.AspNetCore.Components.Authorization
@using YZPortal.Client.Models.Users;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Validation;
@using YZPortal.Client.Models.Dealers;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject NavigationManager Nav

<h3>Login</h3>
<EditForm Model="user" OnValidSubmit="OnValidSubmit" style="max-width:500px;">
    <CustomValidation @ref="customValidation" />
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-2">
        <InputText class="form-control" @bind-Value="user.Email" placeholder="Enter Email"></InputText>
    </div>
    <div class="mb-2">
        <InputText type="password" class="form-control" @bind-Value="user.Password" placeholder="Enter Password"></InputText>
    </div>
    <div class="mb-2 text-right">
        <button class="btn btn-secondary" disabled="@isLoginDisabled">login</button>
    </div>
</EditForm>

@code {
    YZPortal.Client.Models.Users.UserLogin user = new YZPortal.Client.Models.Users.UserLogin();
    bool isLoginDisabled;
    private CustomValidation? customValidation;

    private async Task OnValidSubmit()
    {
        // Authenticate and disable login button while authenticating
        isLoginDisabled = true;

        UserLoginResult userLoginResult = await YZPortalApiClient.UserAuthenticate(user);

        isLoginDisabled = userLoginResult.IsStatusCodeSucess ? true : false;

        // Fetch dealers if authentication is successful and render the dealer selection dialog
        if (userLoginResult.IsStatusCodeSucess)
        {
            Nav.NavigateTo("/Authorization/SelectDealer");
        }
        else
        {
            customValidation?.ClearErrors();
            var errors = new Dictionary<string, List<string>>();
            errors.Add(string.Empty, new List<string>() { userLoginResult.Message });
            customValidation?.DisplayErrors(errors);
        }

        StateHasChanged();
    }
}