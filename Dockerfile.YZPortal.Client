# Follow the steps below for local testing:
# 1. First, open the command prompt at root and run the following command to build docker image: 
# docker build -f ./Dockerfile.YZPortal.Client -t yzportal.client .

# 2. Next, run the following command to generate ssl cert without password for https:
# dotnet dev-certs https -ep %USERPROFILE%\nginx\ssl.crt -np --trust --format PEM

# 3. Finally, run the following command to create a container for the image:
# docker run -p 5207:80 -p 7195:443 -e ASPNETCORE_URLS="https://+;http://+" -e ASPNETCORE_HTTPS_PORTS=7195 -e ASPNETCORE_Kestrel__Certificates__Default__Password="P@ssw0rd123" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx -v %USERPROFILE%\.aspnet\https:/https/ yzportal.client

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["Source/Core/Application/Application.csproj", "Source/Core/Application/"]
COPY ["Source/Core/Domain/Domain.csproj", "Source/Core/Domain/"]
COPY ["Source/Web/YZPortal.Client/YZPortal.Client.csproj", "Source/Web/YZPortal.Client/"]
RUN dotnet restore "./Source/Web/YZPortal.Client/YZPortal.Client.csproj"
COPY . .
WORKDIR "/src/Source/Web/YZPortal.Client"
RUN dotnet build "./YZPortal.Client.csproj" -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./YZPortal.Client.csproj" -c $BUILD_CONFIGURATION -o /app/publish

FROM nginx:alpine AS final
EXPOSE 80
EXPOSE 443
WORKDIR /usr/share/nginx/html
COPY --from=publish /app/publish/wwwroot .
COPY nginx.conf /etc/nginx/nginx.conf