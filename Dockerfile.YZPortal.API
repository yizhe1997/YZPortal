# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# Follow the steps below for local testing:
# 1. First, initiate a command prompt at root and run the following command to build docker image: 
# docker build -f ./Dockerfile.YZPortal.API -t yzportal-api .

# 2. Next, run the following commands to generate ssl cert with password for https:
# dotnet dev-certs https --clean
# dotnet dev-certs https -ep %USERPROFILE%\.aspnet\https\aspnetapp.pfx -p P@ssw0rd123 --trust

# 3. Finally, run the following command to create a container for the image:
# docker run -p 5000:80 -p 5001:443 -e ASPNETCORE_URLS="https://+;http://+" -e ASPNETCORE_HTTPS_PORTS=8081 -e ASPNETCORE_Kestrel__Certificates__Default__Password="P@ssw0rd123" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx -v %USERPROFILE%\.aspnet\https:/https/ yzportal-api

FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["Source/Web/YZPortal.API/YZPortal.API.csproj", "Source/Web/YZPortal.API/"]
COPY ["Source/Infrastructure/Infrastructure/Infrastructure.csproj", "Source/Infrastructure/Infrastructure/"]
COPY ["Source/Core/Application/Application.csproj", "Source/Core/Application/"]
COPY ["Source/Core/Domain/Domain.csproj", "Source/Core/Domain/"]
RUN dotnet restore "./Source/Web/YZPortal.API/YZPortal.API.csproj"
COPY . .
WORKDIR "/src/Source/Web/YZPortal.API"
RUN dotnet build "./YZPortal.API.csproj" -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./YZPortal.API.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "YZPortal.API.dll"]