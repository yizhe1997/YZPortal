<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="yzorganization.onmicrosoft.com" PolicyId="B2C_1A_AccountLink_Extensions" PublicPolicyUri="http://yzorganization.onmicrosoft.com/B2C_1A_AccountLink_Extensions" TenantObjectId="4369f48a-7236-4eeb-b728-295446bfdec9">
	<BasePolicy>
		<TenantId>yzorganization.onmicrosoft.com</TenantId>
		<PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
	</BasePolicy>
	<BuildingBlocks>
		<ClaimsSchema>
			<ClaimType Id="extension_haspassword">
				<DisplayName>has password</DisplayName>
				<DataType>boolean</DataType>
				<AdminHelpText>user has password</AdminHelpText>
				<UserHelpText>user has password</UserHelpText>
			</ClaimType>
			<ClaimType Id="SocialProofMatchesLocalAccount">
				<DisplayName>SocialProofMatchesLocalAccount</DisplayName>
				<DataType>boolean</DataType>
				<AdminHelpText>SocialProofMatchesLocalAccount</AdminHelpText>
				<UserHelpText>SocialProofMatchesLocalAccount</UserHelpText>
			</ClaimType>
			<ClaimType Id="currentIssuers">
				<DisplayName>issuers</DisplayName>
				<DataType>stringCollection</DataType>
				<UserHelpText>User identity providers. This information is received from alternativeSecurityIds</UserHelpText>
			</ClaimType>
			<ClaimType Id="executedLoginWithLocalToLink">
				<DisplayName>executedLoginWithLocalToLink</DisplayName>
				<DataType>boolean</DataType>
				<AdminHelpText>executedLoginWithLocalToLink</AdminHelpText>
				<UserHelpText>executedLoginWithLocalToLink</UserHelpText>
			</ClaimType>
			<ClaimType Id="localAccountUpn">
				<DisplayName>localAccountUpn</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>localAccountUpn</AdminHelpText>
				<UserHelpText>localAccountUpn</UserHelpText>
				<UserInputType>Readonly</UserInputType>
			</ClaimType>
			<ClaimType Id="localAccountEmail">
				<DisplayName>localAccountEmail</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>localAccountEmail</AdminHelpText>
				<UserHelpText>localAccountEmail</UserHelpText>
			</ClaimType>
			<ClaimType Id="readOnlyEmail">
				<DisplayName>Email Address</DisplayName>
				<DataType>string</DataType>
				<UserHelpText/>
				<UserInputType>Readonly</UserInputType>
			</ClaimType>
			<ClaimType Id="linkedEmail">
				<DisplayName>Email Address</DisplayName>
				<DataType>string</DataType>
				<UserHelpText/>
				<UserInputType>TextBox</UserInputType>
			</ClaimType>
			<ClaimType Id="linkLocalToThisSocial">
				<DisplayName>linkLocalToThisSocial</DisplayName>
				<DataType>string</DataType>
				<UserHelpText/>
				<UserInputType>Readonly</UserInputType>
			</ClaimType>
			<ClaimType Id="containsIssuerAlready">
				<DisplayName>containsIssuerAlready</DisplayName>
				<DataType>boolean</DataType>
				<UserHelpText/>
			</ClaimType>
			<ClaimType Id="currentUserIdentities">
				<DisplayName>currentUserIdentities</DisplayName>
				<DataType>userIdentityCollection</DataType>
				<AdminHelpText>currentUserIdentities</AdminHelpText>
				<UserHelpText>currentUserIdentities</UserHelpText>
			</ClaimType>
			<ClaimType Id="newUserIdentities">
				<DisplayName>userIdentities</DisplayName>
				<DataType>userIdentityCollection</DataType>
				<AdminHelpText>userIdentities</AdminHelpText>
				<UserHelpText>userIdentities</UserHelpText>
			</ClaimType>
			<ClaimType Id="userIdentities">
				<DisplayName>userIdentities</DisplayName>
				<DataType>userIdentityCollection</DataType>
				<AdminHelpText>userIdentities</AdminHelpText>
				<UserHelpText>userIdentities</UserHelpText>
			</ClaimType>
			<ClaimType Id="userIdentity">
				<DisplayName>userIdentity</DisplayName>
				<DataType>userIdentity</DataType>
				<AdminHelpText>userIdentity</AdminHelpText>
				<UserHelpText>userIdentity</UserHelpText>
			</ClaimType>
			<ClaimType Id="objectIdToLink">
				<DisplayName>objectIdToLink</DisplayName>
				<DataType>string</DataType>
				<UserHelpText>Second account user objectId</UserHelpText>
			</ClaimType>
			<!--Sample: Stores the error message if user exists-->
			<ClaimType Id="errorMessage">
				<DisplayName></DisplayName>
				<DataType>string</DataType>
				<UserHelpText>Add help text here</UserHelpText>
				<UserInputType>Paragraph</UserInputType>
			</ClaimType>
			<ClaimType Id="issuerToUnlink">
				<DisplayName>issuerToUnlink</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>issuerToUnlink</AdminHelpText>
				<UserHelpText>issuerToUnlink</UserHelpText>
			</ClaimType>
			<ClaimType Id="issuerToLink">
				<DisplayName>issuerToLink</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>issuerToLink</AdminHelpText>
				<UserHelpText>issuerToLink</UserHelpText>
			</ClaimType>
			<ClaimType Id="issuerUserId">
				<DisplayName>issuerUserId</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>issuerUserId</AdminHelpText>
				<UserHelpText>issuerUserId</UserHelpText>
			</ClaimType>
			<ClaimType Id="issuerUserIdToLink">
				<DisplayName>issuerUserIdToLink</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>issuerUserIdToLink</AdminHelpText>
				<UserHelpText>issuerUserIdToLink</UserHelpText>
			</ClaimType>
			<ClaimType Id="userIdentityToLink">
				<DisplayName>userIdentityToLink</DisplayName>
				<DataType>userIdentity</DataType>
				<AdminHelpText>userIdentityToLink</AdminHelpText>
				<UserHelpText>userIdentityToLink</UserHelpText>
			</ClaimType>
			<ClaimType Id="issuers">
				<DisplayName>issuers</DisplayName>
				<DataType>stringCollection</DataType>
				<UserHelpText>User identity providers. This information is received from alternativeSecurityIds</UserHelpText>
			</ClaimType>
			<ClaimType Id="socialEmail">
				<DisplayName>socialEmail</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>socialEmail</AdminHelpText>
				<UserHelpText>socialEmail</UserHelpText>
			</ClaimType>
			<ClaimType Id="socialEmailLinkAttempt">
				<DisplayName>socialEmailLinkAttempt</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>socialEmailLinkAttempt</AdminHelpText>
				<UserHelpText>socialEmailLinkAttempt</UserHelpText>
			</ClaimType>
		</ClaimsSchema>
		<ClaimsTransformations>
			<ClaimsTransformation Id="CopySignInNameToReadOnly" TransformationMethod="FormatStringClaim">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="localAccountEmail" TransformationClaimType="inputClaim" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringFormat" DataType="string" Value="{0}" />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="readOnlyEmail" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="UserIdentitiesContainsCurrentIssuer" TransformationMethod="StringCollectionContainsClaim">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="currentIssuers" TransformationClaimType="collection" />
					<InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="item" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="ignoreCase" DataType="string" Value="true" />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="containsIssuerAlready" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<!--Sample: Extracts the list of social identity providers associated with the user -->
			<ClaimsTransformation Id="ExtractCurrentIssuers" TransformationMethod="GetIssuersFromUserIdentityCollectionTransformation">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="currentUserIdentities" TransformationClaimType="userIdentityCollection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="currentIssuers" TransformationClaimType="issuersCollection" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="AppendNewUserIdentityToCurrentUserIdentities" TransformationMethod="AddItemToUserIdentityCollection">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="userIdentity" TransformationClaimType="item" />
					<InputClaim ClaimTypeReferenceId="currentUserIdentities" TransformationClaimType="collection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="currentUserIdentities" TransformationClaimType="collection" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CopyEmailToLinkedEmail" TransformationMethod="FormatStringClaim">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringFormat" DataType="string" Value="{0}" />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="localAccountEmail" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="AssertEmailAndLinkedEmailAreEqual" TransformationMethod="AssertStringClaimsAreEqual">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="localAccountUpn" TransformationClaimType="inputClaim1" />
					<InputClaim ClaimTypeReferenceId="userprincipalname" TransformationClaimType="inputClaim2" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
				</InputParameters>
			</ClaimsTransformation>
			<ClaimsTransformation Id="assertLocalObjectIdSameAsIncomingSocialObjectIdProof" TransformationMethod="CompareClaims">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="objectId" TransformationClaimType="inputClaim1" />
					<InputClaim ClaimTypeReferenceId="objectIdToLink" TransformationClaimType="inputClaim2" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="operator" DataType="string" Value="EQUAL" />
					<InputParameter Id="ignoreCase" DataType="string" Value="true" />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="SocialProofMatchesLocalAccount" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CreateRandomPassword" TransformationMethod="CreateRandomString">
				<InputParameters>
					<InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="newPassword" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CreateUserMatchError" TransformationMethod="FormatStringClaim">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="issuerToLink" TransformationClaimType="inputClaim" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringFormat" DataType="string" Value="The email provided by the Identity Provider did not match that associated with the initial Identity Providers sign in." />
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="errorMessage" TransformationClaimType="outputClaim" />
				</OutputClaims>
			</ClaimsTransformation>
			<!-- Sample: On sign-in (first time) with social account, create a userIdentity claim, using issuerUserId and issuer name -->
			<ClaimsTransformation Id="CreateUserIdentity" TransformationMethod="CreateUserIdentity">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="issuerUserId" TransformationClaimType="issuerUserId" />
					<InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="issuer" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="userIdentity" TransformationClaimType="userIdentity" />
				</OutputClaims>
			</ClaimsTransformation>
			<!-- Sample: On sign-in (second time) with social account, create a userIdentityToLink claim, using issuerUserId and issuer name -->
			<ClaimsTransformation Id="CreateUserIdentityToLink" TransformationMethod="CreateUserIdentity">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="issuerUserIdToLink" TransformationClaimType="issuerUserId" />
					<InputClaim ClaimTypeReferenceId="issuerToLink" TransformationClaimType="issuer" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="userIdentityToLink" TransformationClaimType="userIdentity" />
				</OutputClaims>
			</ClaimsTransformation>
			<!--Sample: Add a userIdentity to the userIdentities collection. .-->
			<ClaimsTransformation Id="AppendUserIdentity" TransformationMethod="AddItemToUserIdentityCollection">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="userIdentity" TransformationClaimType="item" />
					<InputClaim ClaimTypeReferenceId="userIdentities" TransformationClaimType="collection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="userIdentities" TransformationClaimType="collection" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="AppendUserIdentityToLink" TransformationMethod="AddItemToUserIdentityCollection">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="userIdentityToLink" TransformationClaimType="item" />
					<InputClaim ClaimTypeReferenceId="newUserIdentities" TransformationClaimType="collection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="newUserIdentities" TransformationClaimType="collection" />
				</OutputClaims>
			</ClaimsTransformation>
			<!--Sample: Removes an issuer from the  claim from the userIdentities collection-->
			<ClaimsTransformation Id="RemoveUserIdentityFromCollectionByIssuer" TransformationMethod="RemoveUserIdentityFromCollectionByIssuer">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="issuerToUnlink" TransformationClaimType="issuer" />
					<InputClaim ClaimTypeReferenceId="userIdentities" TransformationClaimType="collection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="userIdentities" TransformationClaimType="collection" />
				</OutputClaims>
			</ClaimsTransformation>
			<!--Sample: Extracts the list of social identity providers associated with the user -->
			<ClaimsTransformation Id="ExtractIssuers" TransformationMethod="GetIssuersFromUserIdentityCollectionTransformation">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="userIdentities" TransformationClaimType="userIdentityCollection" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="issuers" TransformationClaimType="issuersCollection" />
				</OutputClaims>
			</ClaimsTransformation>
		</ClaimsTransformations>
	</BuildingBlocks>
	<ClaimsProviders>
		<ClaimsProvider>
			<DisplayName>Azure Active Directory</DisplayName>
			<TechnicalProfiles>
				<!--Sample: use incoming email from social idp to try find a local account -->
				<TechnicalProfile Id="AAD-FindLocalAccountWithSocialEmail">
					<Metadata>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
						<Item Key="api-version">1.6</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="signInNames.emailAddress" Required="true" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="localAccountEmail" PartnerClaimType="signInNames.emailAddress" DefaultValue="false"/>
						<OutputClaim ClaimTypeReferenceId="currentUserIdentities" PartnerClaimType="userIdentities"/>
						<OutputClaim ClaimTypeReferenceId="extension_haspassword" DefaultValue="false"/>
						<OutputClaim ClaimTypeReferenceId="localAccountUpn" PartnerClaimType="userPrincipalName"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="ExtractCurrentIssuers" />
						<OutputClaimsTransformation ReferenceId="UserIdentitiesContainsCurrentIssuer" />
						<OutputClaimsTransformation ReferenceId="AppendNewUserIdentityToCurrentUserIdentities" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-UpdateUserIdentitiesToLocalUser">
					<Metadata>
						<Item Key="api-version">1.6</Item>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="currentUserIdentities" PartnerClaimType="userIdentities" />
					</PersistedClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="currentUserIdentities" PartnerClaimType="userIdentities" />
					</OutputClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
				<!-- This technical profile uses a validation technical profile to authenticate the user. -->
				<TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email-Link">
					<DisplayName>Sign in with your Email</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="setting.operatingMode">Email</Item>
						<Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
						<Item Key="UserMessageIfClaimsTransformationStringsAreNotEqual">Email changed! Start Over.</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="localAccountEmail" PartnerClaimType="signInName"/>
						<InputClaim ClaimTypeReferenceId="localAccountUpn"/>
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
						<OutputClaim ClaimTypeReferenceId="password" Required="true" />
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="userprincipalname" />
						<OutputClaim ClaimTypeReferenceId="localAccountUpn"/>
						<OutputClaim ClaimTypeReferenceId="executedLoginWithLocalToLink" DefaultValue="true" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="AssertEmailAndLinkedEmailAreEqual" />
					</OutputClaimsTransformations>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="login-NonInteractive" />
					</ValidationTechnicalProfiles>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<DisplayName>Local Account</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="LocalAccountSignUpWithLogonEmail-HasEmailFlagged">
					<DisplayName>Email signup</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="IpAddressClaimReferenceId">IpAddress</Item>
						<Item Key="ContentDefinitionReferenceId">api.localaccountsignup</Item>
						<Item Key="language.button_continue">Create</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
					</CryptographicKeys>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="email" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
						<OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
						<OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
						<OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" />
						<OutputClaim ClaimTypeReferenceId="newUser" />
						<!-- Optional claims, to be collected from the user -->
						<OutputClaim ClaimTypeReferenceId="displayName" />
						<OutputClaim ClaimTypeReferenceId="givenName" />
						<OutputClaim ClaimTypeReferenceId="surName" />
					</OutputClaims>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonEmail" />
						<ValidationTechnicalProfile ReferenceId="AAD-WriteUserHasPassword" />
					</ValidationTechnicalProfiles>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
				</TechnicalProfile>
				<TechnicalProfile Id="CheckProofOfSocialObjectIdMatchesLocal">
					<DisplayName>Compare Email And Verify Email</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="SocialProofMatchesLocalAccount" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="assertLocalObjectIdSameAsIncomingSocialObjectIdProof" />
					</OutputClaimsTransformations>
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-WriteUserHasPassword">
					<Metadata>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="extension_haspassword" DefaultValue="true" />
					</PersistedClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<DisplayName>Azure Active Directory</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="AAD-UserReadUsingUserIdentityToLink-NoError">
					<Metadata>
						<Item Key="api-version">1.6</Item>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="newUserIdentities" PartnerClaimType="userIdentities" Required="true" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectIdToLink" PartnerClaimType="objectId" />
					</OutputClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-UserReadUsingUserIdentity">
					<Metadata>
						<Item Key="api-version">1.6</Item>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
						<Item Key="UserMessageIfClaimsPrincipalDoesNotExist">User does not exist. Please sign up before you can sign in.</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="userIdentities" PartnerClaimType="userIdentities" Required="true" />
					</InputClaims>
					<OutputClaims>
						<!-- Required claims -->
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="userIdentities" />
						<!-- Optional claims -->
						<OutputClaim ClaimTypeReferenceId="displayName" />
						<OutputClaim ClaimTypeReferenceId="otherMails" />
						<OutputClaim ClaimTypeReferenceId="givenName" />
						<OutputClaim ClaimTypeReferenceId="surname" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="ExtractIssuers" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-UserReadUsingUserIdentity-NoError">
					<Metadata>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
					</Metadata>
					<IncludeTechnicalProfile ReferenceId="AAD-UserReadUsingUserIdentity" />
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-UserWriteUsingUserIdentity">
					<Metadata>
						<Item Key="api-version">1.6</Item>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
						<Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered, please press the back button and sign in instead.</Item>
					</Metadata>
					<InputClaimsTransformations>
						<InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmail"/>
					</InputClaimsTransformations>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="userIdentities" PartnerClaimType="userIdentities" Required="true"/>
					</InputClaims>
					<PersistedClaims>
						<!-- Required claims -->
						<PersistedClaim ClaimTypeReferenceId="userIdentities"/>
						<PersistedClaim ClaimTypeReferenceId="userPrincipalName"/>
						<PersistedClaim ClaimTypeReferenceId="mailNickName" DefaultValue="unknown"/>
						<PersistedClaim ClaimTypeReferenceId="displayName" DefaultValue="unknown"/>
						<PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
						<!-- dummy password (random GUID) for social account sign up. prevents account being provisioned as disabled-->
						<PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password"/>
						<!-- Optional claims -->
						<PersistedClaim ClaimTypeReferenceId="otherMails"/>
						<PersistedClaim ClaimTypeReferenceId="givenName"/>
						<PersistedClaim ClaimTypeReferenceId="surname"/>
						<PersistedClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="signInNames.emailAddress"/>
					</PersistedClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId"/>
						<OutputClaim ClaimTypeReferenceId="userIdentities"/>
						<OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated"/>
						<!-- The following other mails claim is needed for the case when a user is created, we get otherMails from directory. Self-asserted provider also has an
                 OutputClaims, and if this is absent, Self-Asserted provider will prompt the user for otherMails. -->
						<OutputClaim ClaimTypeReferenceId="otherMails"/>
					</OutputClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common"/>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD"/>
				</TechnicalProfile>
				<!--Sample: Update the userIdentities to add or remove user identity -->
				<TechnicalProfile Id="AAD-UserUpdateWithUserIdentities">
					<Metadata>
						<Item Key="api-version">1.6</Item>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="userIdentities" />
					</PersistedClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="userIdentities" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="ExtractIssuers" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
				<!--Sample: Reads local accoutn's  userIdentities attribute to userIdentities claim-->
				<TechnicalProfile Id="AAD-UserReadUsingObjectId">
					<Metadata>
						<Item Key="api-version">1.6</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="currentUserIdentities" PartnerClaimType="userIdentities"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="ExtractIssuers" />
					</OutputClaimsTransformations>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<DisplayName>Self Asserted</DisplayName>
			<TechnicalProfiles>
				<!-- Demo: Show error message if user exists-->
				<TechnicalProfile Id="SelfAsserted-Error">
					<DisplayName>Unsolicited error message</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
						<!-- Sample: Remove the continue button-->
						<Item Key="setting.showContinueButton">false</Item>
					</Metadata>
					<InputClaimsTransformations>
						<InputClaimsTransformation ReferenceId="CreateUserMatchError" />
					</InputClaimsTransformations>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="errorMessage"/>
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="errorMessage"/>
					</OutputClaims>
				</TechnicalProfile>
				<TechnicalProfile Id="SelfAsserted-Social-v2">
					<DisplayName>User ID signup</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer"/>
					</CryptographicKeys>
					<InputClaimsTransformations>
						<InputClaimsTransformation ReferenceId="CreateRandomPassword" />
					</InputClaimsTransformations>
					<InputClaims>
						<!-- These claims ensure that any values retrieved in the previous steps (e.g. from an external IDP) are prefilled. 
                 Note that some of these claims may not have any value, for example, if the external IDP did not provide any of
                 these values, or if the claim did not appear in the OutputClaims section of the IDP.
                 In addition, if a claim is not in the InputClaims section, but it is in the OutputClaims section, then its
                 value will not be prefilled, but the user will still be prompted for it (with an empty value). -->
						<InputClaim ClaimTypeReferenceId="displayName"/>
						<InputClaim ClaimTypeReferenceId="givenName"/>
						<InputClaim ClaimTypeReferenceId="surname"/>
					</InputClaims>
					<OutputClaims>
						<!-- These claims are not shown to the user because their value is obtained through the "ValidationTechnicalProfiles"
                 referenced below, or a default value is assigned to the claim. A claim is only shown to the user to provide a 
                 value if its value cannot be obtained through any other means. -->
						<OutputClaim ClaimTypeReferenceId="objectId"/>
						<OutputClaim ClaimTypeReferenceId="newUser"/>
						<OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true"/>
						<!-- Optional claims. These claims are collected from the user and can be modified. If a claim is to be persisted in the directory after having been 
                 collected from the user, it needs to be added as a PersistedClaim in the ValidationTechnicalProfile referenced below, i.e. 
                 in AAD-UserWriteUsingAlternativeSecurityId. -->
						<OutputClaim ClaimTypeReferenceId="displayName"/>
						<OutputClaim ClaimTypeReferenceId="givenName"/>
						<OutputClaim ClaimTypeReferenceId="surname"/>
					</OutputClaims>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingUserIdentity"/>
					</ValidationTechnicalProfiles>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialSignup"/>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<!-- Facebook claims provider -->
		<ClaimsProvider>
			<DisplayName>Facebook</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="Facebook-OAUTH-Base">
					<DisplayName>Facebook</DisplayName>
					<Protocol Name="OAuth2" />
					<Metadata>
						<Item Key="ProviderName">facebook</Item>
						<Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
						<Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
						<Item Key="HttpBinding">GET</Item>
						<Item Key="UsePolicyInRedirectUri">0</Item>
						<Item Key="AccessTokenResponseFormat">json</Item>
						<!--Sample action required: Change to your Facebook App Id-->
						<Item Key="client_id">5920418734747480</Item>
						<Item Key="scope">email public_profile</Item>
						<Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="client_secret" StorageReferenceId="B2C_1A_FacebookSecret" />
					</CryptographicKeys>
					<InputClaims />
				</TechnicalProfile>
				<TechnicalProfile Id="Facebook-OAUTH-SignIn">
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id" />
						<OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="first_name" />
						<OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="last_name" />
						<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
						<OutputClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="facebook.com" AlwaysUseDefaultValue="true" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
						<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
						<OutputClaimsTransformation ReferenceId="CreateUserIdentity" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentity" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Facebook-OAUTH-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
				</TechnicalProfile>
				<TechnicalProfile Id="Facebook-OAUTH-Link">
					<DisplayName>Link Facebook</DisplayName>
					<Metadata>
						<Item Key="ClaimTypeOnWhichToEnable">currentIssuers</Item>
						<Item Key="ClaimValueOnWhichToEnable">facebook.com</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserIdToLink" PartnerClaimType="id" />
						<OutputClaim ClaimTypeReferenceId="socialEmailLinkAttempt" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="issuerToLink" DefaultValue="facebook.com" AlwaysUseDefaultValue="true" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateUserIdentityToLink" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentityToLink" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Facebook-OAUTH-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
					<!-- The button will show up only when facebook.com is missing in issuers claim -->
					<EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<!-- Google claims provider -->
		<ClaimsProvider>
			<Domain>google.com</Domain>
			<DisplayName>Google</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="Google-OAUTH-Base">
					<DisplayName>Google</DisplayName>
					<Protocol Name="OAuth2" />
					<Metadata>
						<Item Key="ProviderName">google</Item>
						<Item Key="authorization_endpoint">https://accounts.google.com/o/oauth2/auth</Item>
						<Item Key="AccessTokenEndpoint">https://accounts.google.com/o/oauth2/token</Item>
						<Item Key="ClaimsEndpoint">https://www.googleapis.com/oauth2/v1/userinfo</Item>
						<Item Key="scope">email profile</Item>
						<Item Key="HttpBinding">POST</Item>
						<Item Key="UsePolicyInRedirectUri">0</Item>
						<Item Key="client_id">893986699704-u2q8th9vd2oanlpfsnckb3q9fmdg686e.apps.googleusercontent.com</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="client_secret" StorageReferenceId="B2C_1A_GoogleSecret" />
					</CryptographicKeys>
				</TechnicalProfile>
				<TechnicalProfile Id="Google-OAUTH-SignIn">
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id" />
						<OutputClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
						<OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name" />
						<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
						<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="google.com" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
						<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
						<OutputClaimsTransformation ReferenceId="CreateUserIdentity" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentity" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Google-OAUTH-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
				</TechnicalProfile>
				<TechnicalProfile Id="Google-OAUTH-Link">
					<DisplayName>Link Google</DisplayName>
					<Metadata>
						<Item Key="ClaimTypeOnWhichToEnable">currentIssuers</Item>
						<Item Key="ClaimValueOnWhichToEnable">google.com</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserIdToLink" PartnerClaimType="id" />
						<OutputClaim ClaimTypeReferenceId="socialEmailLinkAttempt" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="issuerToLink" DefaultValue="google.com" AlwaysUseDefaultValue="true" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateUserIdentityToLink" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentityToLink" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Google-OAUTH-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
					<EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<!-- Microsoft claims provider -->
		<ClaimsProvider>
			<Domain>live.com</Domain>
			<DisplayName>Microsoft Account</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="MSA-OIDC-Base">
					<DisplayName>Microsoft Account</DisplayName>
					<Protocol Name="OpenIdConnect" />
					<Metadata>
						<Item Key="ProviderName">https://login.live.com</Item>
						<Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
						<Item Key="response_types">code</Item>
						<Item Key="response_mode">form_post</Item>
						<Item Key="scope">openid profile email</Item>
						<Item Key="HttpBinding">POST</Item>
						<Item Key="UsePolicyInRedirectUri">0</Item>
						<!--Sample action required: Change to your Microsoft App Id-->
						<Item Key="client_id">be4842aa-b195-44e4-8250-f882310c51c5</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="client_secret" StorageReferenceId="B2C_1A_MSASecret" />
					</CryptographicKeys>
				</TechnicalProfile>
				<TechnicalProfile Id="MSA-OIDC-SignIn">
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="live.com" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
						<OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="sub" />
						<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
						<OutputClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="email"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
						<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
						<OutputClaimsTransformation ReferenceId="CreateUserIdentity" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentity" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="MSA-OIDC-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
				</TechnicalProfile>
				<TechnicalProfile Id="MSA-OAUTH-Link">
					<DisplayName>Link Microsoft</DisplayName>
					<Metadata>
						<Item Key="ClaimTypeOnWhichToEnable">currentIssuers</Item>
						<Item Key="ClaimValueOnWhichToEnable">live.com</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserIdToLink" PartnerClaimType="sub" />
						<OutputClaim ClaimTypeReferenceId="socialEmailLinkAttempt" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="issuerToLink" DefaultValue="live.com" AlwaysUseDefaultValue="true" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateUserIdentityToLink" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentityToLink" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="MSA-OIDC-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
					<EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<!-- Twitter claims provider -->
		<ClaimsProvider>
			<Domain>twitter.com</Domain>
			<DisplayName>Twitter</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="Twitter-OAUTH1-Base">
					<DisplayName>Twitter</DisplayName>
					<Protocol Name="OAuth1" />
					<Metadata>
						<Item Key="ProviderName">Twitter</Item>
						<Item Key="authorization_endpoint">https://api.twitter.com/oauth/authenticate</Item>
						<Item Key="access_token_endpoint">https://api.twitter.com/oauth/access_token</Item>
						<Item Key="request_token_endpoint">https://api.twitter.com/oauth/request_token</Item>
						<Item Key="ClaimsEndpoint">https://api.twitter.com/1.1/account/verify_credentials.json?include_email=true</Item>
						<Item Key="ClaimsResponseFormat">json</Item>
						<Item Key="client_id">5t6Kb5tl2f70ua14FJcjICKqm</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="client_secret" StorageReferenceId="B2C_1A_TwitterSecret" />
					</CryptographicKeys>
				</TechnicalProfile>
				<TechnicalProfile Id="Twitter-OAUTH1-SignIn">
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="user_id" />
						<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="screen_name" />
						<OutputClaim ClaimTypeReferenceId="socialEmail" PartnerClaimType="email" />
						<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="twitter.com" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
						<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
						<OutputClaimsTransformation ReferenceId="CreateUserIdentity" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentity" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Twitter-OAUTH1-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
				</TechnicalProfile>
				<TechnicalProfile Id="Twitter-OAUTH1-Link">
					<DisplayName>Link Twitter</DisplayName>
					<Metadata>
						<Item Key="ClaimTypeOnWhichToEnable">currentIssuers</Item>
						<Item Key="ClaimValueOnWhichToEnable">twitter.com</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="issuerUserIdToLink" PartnerClaimType="user_id" />
						<OutputClaim ClaimTypeReferenceId="issuerToLink" DefaultValue="twitter.com" AlwaysUseDefaultValue="true" />
						<OutputClaim ClaimTypeReferenceId="socialEmailLinkAttempt" PartnerClaimType="email" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateUserIdentityToLink" />
						<OutputClaimsTransformation ReferenceId="AppendUserIdentityToLink" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="Twitter-OAUTH1-Base" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
					<EnabledForUserJourneys>OnItemExistenceInStringCollectionClaim</EnabledForUserJourneys>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
	</ClaimsProviders>
	<UserJourneys>
		<UserJourney Id="AccountLinkSignUpOrSignIn" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
					<ClaimsProviderSelections>
						<ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="GoogleExchange"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="MicrosoftAccountExchange"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="TwitterExchange"/>
						<ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange"/>
					</ClaimsProviderSelections>
					<ClaimsExchanges>
						<ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Check if the user has selected to sign in using one of the social providers -->
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH-SignIn"/>
						<ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH-SignIn"/>
						<ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC-SignIn"/>
						<ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1-SignIn"/>
						<ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail-HasEmailFlagged"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- if social account auth, try find an account with the incoming email, and return the LocalAccountEmail-->
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="FindLocalAccountWithSocialEmail" TechnicalProfileReferenceId="AAD-FindLocalAccountWithSocialEmail" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Subjourney : 
        Handle the case of the incoming social accounts email matching a an email of another account in directory (social/local).

        Since all signups will provision as local (as signInName.emailaddress is being populated for local and social sign ups)
        If LocalAccountEmail exists, then this Social ID must be linked to an existing Local Account unless its already linked -->
				<OrchestrationStep Order="4" Type="InvokeSubJourney">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>LocalAccountEmail</Value>
							<Value>false</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>containsIssuerAlready</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<JourneyList>
						<Candidate SubJourneyReferenceId="HandleLinkLocalToSocial" />
					</JourneyList>
				</OrchestrationStep>
				<!-- Subjourney : 
        Handle new social account sign in.

        If LocalAccountEmail does not exist, and is not LocalAccount auth, then this Social Id must be provisioned as normal
        If its a local account auth, then skip this entirely -->
				<OrchestrationStep Order="5" Type="InvokeSubJourney">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="false">
							<Value>LocalAccountEmail</Value>
							<Value>false</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<JourneyList>
						<Candidate SubJourneyReferenceId="ProvisionOrSignInNewSocialAccount" />
					</JourneyList>
				</OrchestrationStep>
				<OrchestrationStep Order="6" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="7" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="RESTYZAPI-GetGroupsFromMSGraph" TechnicalProfileReferenceId="RESTYZAPI-GetGroupsFromMSGraph" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>
			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb"/>
		</UserJourney>
	</UserJourneys>
	<SubJourneys>
		<SubJourney Id="ProvisionOrSignInNewSocialAccount" Type="Transfer">
			<OrchestrationSteps>
				<!-- should always be no account present in this path -->
				<OrchestrationStep Order="1" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadUsingUserIdentity" TechnicalProfileReferenceId="AAD-UserReadUsingUserIdentity-NoError" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).  -->
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social-v2" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingUserIdentity" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="5" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="RESTYZAPI-GetGroupsFromMSGraph" TechnicalProfileReferenceId="RESTYZAPI-GetGroupsFromMSGraph" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
		</SubJourney>
		<SubJourney Id="HandleLinkLocalToSocial" Type="Transfer">
			<OrchestrationSteps>
				<!-- if we got an local account email now and is social auth not associated with this email, 
        present page to sign in with local or any other socials as account exists with this email -->
				<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.idpselections">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<!-- skip if this social idp already linked to local account -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>containsIssuerAlready</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>extension_haspassword</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsProviderSelections DisplayOption="ShowSingleProvider">
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkFacebookExchange1"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkGoogleExchange1"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkMSAExchange1"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkTwitterExchange1"/>
					</ClaimsProviderSelections>
				</OrchestrationStep>
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<Preconditions>
						<!-- skip if this social idp already linked to local account -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>executedLoginWithLocalToLink</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>extension_haspassword</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="LinkFacebookExchange1" TechnicalProfileReferenceId="Facebook-OAUTH-Link"/>
						<ClaimsExchange Id="LinkGoogleExchange1" TechnicalProfileReferenceId="Google-OAUTH-Link"/>
						<ClaimsExchange Id="LinkMSAExchange1" TechnicalProfileReferenceId="MSA-OAUTH-Link"/>
						<ClaimsExchange Id="LinkTwitterExchange1" TechnicalProfileReferenceId="Twitter-OAUTH1-Link"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="3" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>extension_haspassword</Value>
							<Value>False</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<!-- skip if this social idp already linked to local account -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>containsIssuerAlready</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsProviderSelections DisplayOption="ShowSingleProvider">
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkFacebookExchange2"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkGoogleExchange2"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkMSAExchange2"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LinkTwitterExchange2"/>
						<ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountSigninEmailExchangeLink2"/>
					</ClaimsProviderSelections>
				</OrchestrationStep>
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<Preconditions>
						<!-- skip if this social idp already linked to local account -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>executedLoginWithLocalToLink</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>extension_haspassword</Value>
							<Value>False</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="LinkFacebookExchange2" TechnicalProfileReferenceId="Facebook-OAUTH-Link"/>
						<ClaimsExchange Id="LinkGoogleExchange2" TechnicalProfileReferenceId="Google-OAUTH-Link"/>
						<ClaimsExchange Id="LinkMSAExchange2" TechnicalProfileReferenceId="MSA-OAUTH-Link"/>
						<ClaimsExchange Id="LinkTwitterExchange2" TechnicalProfileReferenceId="Twitter-OAUTH1-Link"/>
						<ClaimsExchange Id="LocalAccountSigninEmailExchangeLink2" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email-Link"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- use the userIdentity from the linking auth to check if the objectId of that user matches the local account from the initial call-->
				<OrchestrationStep Order="5" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>executedLoginWithLocalToLink</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="LookupProofAccount" TechnicalProfileReferenceId="AAD-UserReadUsingUserIdentityToLink-NoError"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Now comapre the email from Social Link vs Local-->
				<OrchestrationStep Order="6" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>executedLoginWithLocalToLink</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="CheckProofOfSocialObjectIdMatchesLocal" TechnicalProfileReferenceId="CheckProofOfSocialObjectIdMatchesLocal"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Kill journey if proof of social didnt match local email to begin with-->
				<OrchestrationStep Order="7" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>executedLoginWithLocalToLink</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>SocialProofMatchesLocalAccount</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="ProofOfSocialEmailDidntMatchLocalEmail" TechnicalProfileReferenceId="SelfAsserted-Error"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Sample: Link the new social account. -->
				<OrchestrationStep Order="8" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>containsIssuerAlready</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="UpdateUserIdentities" TechnicalProfileReferenceId="AAD-UpdateUserIdentitiesToLocalUser"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="9" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer"/>
			</OrchestrationSteps>
		</SubJourney>
	</SubJourneys>
</TrustFrameworkPolicy>