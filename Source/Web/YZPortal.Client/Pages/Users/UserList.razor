@page "/users"
@using Application.Models.Identity;
@using Application.Models;
@using Domain.Enums.Memberships;
@using Microsoft.AspNetCore.Authorization;
@using System.Diagnostics.CodeAnalysis;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Pages.Users;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize(Policy = nameof(Role.Administrator))]

<h1>Users</h1>

<Table TItem="UserModel"
       IsPagination="true"
       PageItemsSource="@PageItemsSource"
       IsBordered="true"
       ShowToolbar="true"
       ShowDefaultButtons="true"
       ShowDeleteButton="true"
       IsMultipleSelect="true"
       ShowAddButton="false"
       ShowEditButton="false"
       ClickToSelect="true"
       ShowSearch="true"
       ShowCardView="true"
       ShowFooter="true"
       ShowExtendButtons="true"
       ShowExtendEditButton="false"
       ShowExtendDeleteButton="false"
       TableSize="TableSize.Normal"
       OnDeleteAsync="@OnDeleteAsync"
       OnQueryAsync="@OnQueryAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.Email" Sortable="true" Text="Email" />
        <TableColumn @bind-Field="@context.DisplayName" Sortable="true" Text="Name" />
        <TableColumn @bind-Field="@context.AuthTime" Sortable="true" FormatString="yyyy-MM-dd" Text="Last logged-in" />
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton Color="Color.Primary" Icon="fa-solid fa-pen" Text="Edit" OnClick="() => OpenUserEditDialog(context)" />
    </RowButtonTemplate>
</Table>

@code {
    private static IEnumerable<int> PageItemsSource => new int[] { 2, 4, 10 };

    private List<UserModel>? Users;

    private async Task OpenUserEditDialog(UserModel userModel)
    {
        var diloagOpt = new DialogOption()
            {
                ShowCloseButton = false,
                Title = "Edit User",
                Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(),
                Size = Size.Large
            };
        diloagOpt.Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(new Dictionary<string, object?>
            {
                [nameof(UserEditDialog.User)] = userModel,
                [nameof(UserEditDialog.CloseDialog)] = EventCallback.Factory.Create<MouseEventArgs>(this, diloagOpt.CloseDialogAsync)
            });
        await DialogService.Show(diloagOpt);
    }

    private async Task<bool> OnValidSubmit(string? userSubId, IEnumerable<string?> SelectedGraphGroups, IEnumerable<string?> ExistingGraphGroups)
    {
        var userSubIds = new string[] { userSubId ?? string.Empty };

        // Add groups
        foreach (var selectdGraphGroup in SelectedGraphGroups.Except(ExistingGraphGroups))
        {
            await YZPortalApiClient.GraphGroupAddUsers(selectdGraphGroup, userSubIds);
        }

        // Remove groups
        foreach (var selectdGraphGroup in ExistingGraphGroups.Except(SelectedGraphGroups))
        {
            await YZPortalApiClient.GraphGroupRemoveUser(selectdGraphGroup, userSubId);
        }

        return await Task.FromResult(true);
    }

    private async Task<QueryData<UserModel>> OnQueryAsync(QueryPageOptions options)
    {
        var orderby = new List<string>();

        if (options.SortOrder != SortOrder.Unset)
        {
            orderby.Add(options.SortName + " " + options.SortOrder.ToString());
        }

        var result = await YZPortalApiClient.GetUsersAsync(pageSize: options.PageItems, pageNumber: options.PageIndex, searchString: options.SearchText, orderBy: orderby.ToArray());

        Users = result.Data;

        return await Task.FromResult(new QueryData<UserModel>()
            {
                Items = Users,
                TotalCount = result.TotalItems,
                IsSorted = orderby.Any(),
                IsSearch = !string.IsNullOrEmpty(options.SearchText)
            });
    }

    private async Task<bool> OnDeleteAsync(IEnumerable<UserModel> items)
    {
        var users = items.ToList();
        foreach (var user in users)
        {
            var response = await YZPortalApiClient.DeleteUserAsync(user.Id);

            if (response.Succeeded)
                Users?.Remove(user);
        }

        return await Task.FromResult(true);
    }
}