@page "/authentication/{action}"
@using Application.Features.Users.Configs.Queries.GetConfigs;
@using Application.Models;
@using Application.Requests.Users;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Services.Authentication;
@using YZPortal.Client.Services.LocalStorage;
@using Application.Extensions;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject NavigationManager Navigation
@inject ToastService ToastService
@layout LoginLayout

<div hidden>
    <RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="@HandleAuthenticationAsync" />
</div>

@code{
    [Parameter] 
    public string? Action { get; set; }
    [Parameter]
    public ConfigsDto ConfigsModel { get; set; } = new ConfigsDto();
    [Parameter]
    public EventCallback<ConfigsDto> ConfigsModelChanged { get; set; }

    private async Task HandleAuthenticationAsync()
    {
        // Create user in server if subject claim does not exist and update user if it does
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var identity = authState.User.Identities.FirstOrDefault(c => c.IsAuthenticated);
        if (identity != null)
        {
            var userId = authState.User.GetSubClaim();

            if (!string.IsNullOrEmpty(userId))
            {
                var getUserAsyncResult = await YZPortalApiHttpClient.ExecuteCallGuardedAsync(
                    async () => await YZPortalApiClient.GetUserAsync(userId),
                    ToastService,
                    title: "Load Data",
                    hideSuccessToast: true
                );

                if (getUserAsyncResult.Data == null)
                {
                    var createUserAsyncResult = await YZPortalApiHttpClient.ExecuteCallGuardedAsync(
                        async () => await YZPortalApiClient.CreateUserAsync(),
                        ToastService,
                        title: "Create Data",
                        hideSuccessToast: true
                    );
                }
                else
                {
                    var updateCurrentUserViaHttpContextAsyncResult = await YZPortalApiHttpClient.ExecuteCallGuardedAsync(
                        async () => await YZPortalApiClient.UpdateCurrentUserViaHttpContextAsync(),
                        ToastService,
                        title: "Save Data",
                        hideSuccessToast: true
                    );
                }

                // Get user's configurations and store in local storage as well
                var getUserConfigsAsyncResult = await YZPortalApiHttpClient.ExecuteCallGuardedAsync(
                    async () => await YZPortalApiClient.GetUserConfigsAsync(authState.User.GetSubClaim() ?? string.Empty),
                    ToastService,
                    title: "Load Data",
                    hideSuccessToast: true
                );
                ConfigsModel = getUserConfigsAsyncResult.Data;
                await LocalStorageService.SetUserConfigs(ConfigsModel);
                await ConfigsModelChanged.InvokeAsync(ConfigsModel);
            }
        }
    }
}
