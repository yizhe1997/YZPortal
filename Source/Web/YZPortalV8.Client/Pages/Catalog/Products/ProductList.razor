@page "/products"
@using Application.Features.Products.Queries.GetProducts
@using Application.Models.Identity;
@using Application.Models;
@using Domain.Enums.Memberships;
@using Microsoft.AspNetCore.Authorization;
@using System.Diagnostics.CodeAnalysis;
@using YZPortalV8.Client.Clients.YZPortalApi;
@using YZPortalV8.Client.Pages.Users;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize]

<h1>Users</h1>
<div class="tabs-body-content">
    <Table TItem="ProductDto"
           IsPagination="true"
           PageItemsSource="@PageItemsSource"
           IsBordered="true"
           ShowToolbar="true"
           ShowDefaultButtons="true"
           ShowDeleteButton="true"
           IsMultipleSelect="true"
           ShowAddButton="true"
           ShowEditButton="false"
           ClickToSelect="true"
           ShowSearch="true"
           ShowCardView="true"
           ShowFooter="true"
           ShowExtendButtons="true"
           ShowExtendEditButton="false"
           ShowExtendDeleteButton="false"
           TableSize="TableSize.Normal"
           OnAddAsync="@OnAddAsync"
           OnDeleteAsync="@OnDeleteAsync"
           OnQueryAsync="@OnQueryAsync">
        <TableToolbarTemplate>
            <TableToolbarButton Color="Color.Primary"
                                Icon="fa-fw fa-solid fa-floppy-disk"
                                Text="Download PDF"
                                IsAsync />
            <TableToolbarButton Color="Color.Primary"
                                Icon="fa-fw fa-solid fa-floppy-disk"
                                Text="Export"
                                IsAsync />
            <TableToolbarButton Color="Color.Primary"
                                Icon="fa-fw fa-solid fa-floppy-disk"
                                Text="Import"
                                IsAsync />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Name" Text="Picture" />
            <TableColumn @bind-Field="@context.Name" Sortable="true" Text="Product Name" Searchable="true">
                <SearchTemplate Context="model">
                    <div class="col-12 col-sm-6">
                        <Select Items="GraphGroups" @bind-Value="@model!.Name" ShowLabel="true" DisplayText="Product Name"></Select>
                    </div>
                </SearchTemplate>
            </TableColumn>
            <TableColumn @bind-Field="@context.Sku" Sortable="true" Text="SKU" Searchable="true" />
            <TableColumn @bind-Field="@context.Price" Text="Price" />
            <TableColumn @bind-Field="@context.StockQuantity" Sortable="true" Text="Stock Qty" />
        </TableColumns>
        @* <RowButtonTemplate>
            <TableCellButton Color="Color.Primary" Icon="fa-solid fa-pen" Text="Edit" OnClick="() => OpenUserEditDialog(context)" />
        </RowButtonTemplate> *@
    </Table>
</div>

@code {
    private List<SelectedItem> GraphGroups = new List<SelectedItem>();

    private static IEnumerable<int> PageItemsSource => new int[] { 2, 4, 10 };

    private List<ProductDto>? Products;

    private async Task OpenUserEditDialog(UserModel userModel)
    {
        var dialogOpt = new DialogOption()
            {
                ShowCloseButton = false,
                Title = "Edit User",
                Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(),
                Size = Size.Large
            };
        dialogOpt.Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(new Dictionary<string, object?>
            {
                [nameof(UserEditDialog.User)] = userModel,
                [nameof(UserEditDialog.CloseDialog)] = EventCallback.Factory.Create<MouseEventArgs>(this, dialogOpt.CloseDialogAsync)
            });
        await DialogService.Show(dialogOpt);
    }

    private async Task<bool> OnValidSubmit(string? userSubId, IEnumerable<string?> SelectedGraphGroups, IEnumerable<string?> ExistingGraphGroups)
    {
        var userSubIds = new string[] { userSubId ?? string.Empty };

        // Add groups
        foreach (var selectdGraphGroup in SelectedGraphGroups.Except(ExistingGraphGroups))
        {
            await YZPortalApiClient.GraphGroupAddUsers(selectdGraphGroup, userSubIds);
        }

        // Remove groups
        foreach (var selectdGraphGroup in ExistingGraphGroups.Except(SelectedGraphGroups))
        {
            await YZPortalApiClient.GraphGroupRemoveUser(selectdGraphGroup, userSubId);
        }

        return await Task.FromResult(true);
    }

    private async Task<QueryData<ProductDto>> OnQueryAsync(QueryPageOptions options)
    {
        var orderby = new List<string>();

        if (options.SortOrder != SortOrder.Unset)
        {
            orderby.Add(options.SortName + " " + options.SortOrder.ToString());
        }

        var result = await YZPortalApiClient.GetProductsAsync(pageSize: options.PageItems, pageNumber: options.PageIndex, searchString: options.SearchText, orderBy: orderby.ToArray());

        Products = result.Data;

        return await Task.FromResult(new QueryData<ProductDto>()
            {
                Items = Products,
                TotalCount = result.TotalItems,
                IsSorted = orderby.Any(),
                IsSearch = !string.IsNullOrEmpty(options.SearchText)
            });
    }

    private async Task<ProductDto> OnAddAsync()
    {
        // var users = items.ToList();
        // foreach (var user in users)
        // {
        //     var response = await YZPortalApiClient.DeleteUserAsync(user.Id);

        //     if (response.Succeeded)
        //         Products?.Remove(user);
        // }

        return new ProductDto();
    }

    private async Task<bool> OnDeleteAsync(IEnumerable<ProductDto> items)
    {
        // var users = items.ToList();
        // foreach (var user in users)
        // {
        //     var response = await YZPortalApiClient.DeleteUserAsync(user.Id);

        //     if (response.Succeeded)
        //         Products?.Remove(user);
        // }

        return await Task.FromResult(true);
    }
}