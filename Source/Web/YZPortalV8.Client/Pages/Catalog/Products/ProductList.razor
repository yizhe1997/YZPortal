@page "/products"
@using Application.Features.Products.Commands.AddProduct
@using Application.Features.Products.Queries.GetProducts
@using Application.Models.Identity;
@using Application.Models;
@using Domain.Entities.Products
@using Domain.Enums.Memberships;
@using Microsoft.AspNetCore.Authorization;
@using System.Diagnostics.CodeAnalysis;
@using YZPortal.Client.Clients.YZPortalApi;
@using YZPortal.Client.Pages.Catalog.Products;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize]
@inject YZPortalApiConfig YZPortalApiConfig
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h1>Users</h1>
<div class="tabs-body-content">
	@* AutoRefreshInterval set to 501. Look for "AutoRefreshInterval > 500" in BootstrapBlazor.Components.Table<TItem> class *@
	<Table TItem="ProductDto"
		   IsPagination="true"
		   PageItemsSource="@PageItemsSource"
		   IsBordered="true"
		   ShowToolbar="true"
		   ShowDefaultButtons="true"
		   ShowDeleteButton="true"
		   IsMultipleSelect="true"
		   IsAutoRefresh="@IsTableAutoRefreshEnabled"
		   AutoRefreshInterval=501
		   ShowLoading="true"
		   ShowAddButton="false"
		   ShowEditButton="false"
		   ClickToSelect="true"
		   ShowSearch="true"
		   ShowCardView="true"
		   ShowFooter="true"
		   ShowExtendButtons="true"
		   ShowExtendEditButton="false"
		   ShowExtendDeleteButton="false"
		   TableSize="TableSize.Normal"
		   OnDeleteAsync="@OnDeleteAsync"
		   OnQueryAsync="@OnQueryAsync">
		<TableExtensionToolbarTemplate>
			<ButtonUpload TValue="string" ShowUploadFileList="false" BrowserButtonClass="btn-secondary" />
		</TableExtensionToolbarTemplate>
		<TableToolbarTemplate>
			<TableToolbarButton OnClick="OpenCreateProductDialog"
								Color="Color.Success"
								Icon="fa-solid fa-plus"
								Text="Add"
								IsAsync />
			@* <TableToolbarButton Color="Color.Primary"
			Icon="fa-fw fa-solid fa-floppy-disk"
			Text="Download PDF"
			IsAsync /> *@
			<TableToolbarButton OnClick="DownloadFileFromURL"
								Color="Color.Primary"
								Icon="fa-fw fa-solid fa-floppy-disk"
								Text="Download Excel"
								IsAsync />
			<TableToolbarButton Color="Color.Primary"
								Icon="fa-fw fa-solid fa-floppy-disk"
								Text="Import"
								IsAsync />
		</TableToolbarTemplate>
		<TableColumns>
			<TableColumn @bind-Field="@context.Name" Text="Picture" />
			<TableColumn @bind-Field="@context.Name" Sortable="true" Text="Product Name" Searchable="true">
				<SearchTemplate Context="model">
					<div class="col-12 col-sm-6">
						<Select Items="GraphGroups" @bind-Value="@model!.Name" ShowLabel="true" DisplayText="Product Name"></Select>
					</div>
				</SearchTemplate>
			</TableColumn>
			<TableColumn @bind-Field="@context.Sku" Sortable="true" Text="SKU" Searchable="true" />
			<TableColumn @bind-Field="@context.Price" Text="Price" />
			<TableColumn @bind-Field="@context.StockQuantity" Sortable="true" Text="Stock Qty" />
		</TableColumns>
		@* <RowButtonTemplate>
		<TableCellButton Color="Color.Primary" Icon="fa-solid fa-pen" Text="Edit" OnClick="() => OpenUserEditDialog(context)" />
		</RowButtonTemplate> *@
	</Table>
</div>

@code {
	private List<SelectedItem> GraphGroups { get; set; } = new List<SelectedItem>();

	public QueryPageOptions queryPageOptions { get; set; } = new();

	public List<string> orderby { get; set; } = new List<string>();

	private static IEnumerable<int> PageItemsSource => new int[] { 10, 20, 50 };

	private List<ProductDto>? Products { get; set; }

	public bool IsTableAutoRefreshEnabled { get; set; }

	private async Task OpenCreateProductDialog()
	{
		var dialogOpt = new DialogOption()
			{
				ShowCloseButton = false,
				Title = "Product Creation",
				Component = BootstrapDynamicComponent.CreateComponent<CreateProductDialog>(),
				Size = Size.Large
			};
		dialogOpt.Component = BootstrapDynamicComponent.CreateComponent<CreateProductDialog>(new Dictionary<string, object?>
			{
				[nameof(CreateProductDialog.CloseDialog)] = EventCallback.Factory.Create<MouseEventArgs>(this, dialogOpt.CloseDialogAsync),
				// TODO: using autorefresh is not ideal, look for alternatives e,
				[nameof(CreateProductDialog.RefreshParentComponentCallback)] = EventCallback.Factory.Create<bool>(this, () => IsTableAutoRefreshEnabled = true),
			});
		await DialogService.Show(dialogOpt);
	}

	private async Task DownloadFileFromURL()
	{
		var result = await YZPortalApiClient.GetProductsExcelAsync(pageSize: queryPageOptions.PageItems, pageNumber: queryPageOptions.PageIndex, searchString: queryPageOptions.SearchText, orderBy: orderby.ToArray());

		await JS.InvokeVoidAsync("BlazorDownloadFile", new
		{
			Content = result,
			FileName = $"{nameof(ProductCategory)}.xlsx",
			ContentType = "application/octet-stream"
		});
	}

	private async Task<bool> OnValidSubmit(string? userSubId, IEnumerable<string?> SelectedGraphGroups, IEnumerable<string?> ExistingGraphGroups)
	{
		var userSubIds = new string[] { userSubId ?? string.Empty };

		// Add groups
		foreach (var selectdGraphGroup in SelectedGraphGroups.Except(ExistingGraphGroups))
		{
			await YZPortalApiClient.GraphGroupAddUsers(selectdGraphGroup, userSubIds);
		}

		// Remove groups
		foreach (var selectdGraphGroup in ExistingGraphGroups.Except(SelectedGraphGroups))
		{
			await YZPortalApiClient.GraphGroupRemoveUser(selectdGraphGroup, userSubId);
		}

		return await Task.FromResult(true);
	}

	private async Task<QueryData<ProductDto>> OnQueryAsync(QueryPageOptions options)
	{
		// Reset flag
		if (IsTableAutoRefreshEnabled)
		{
			IsTableAutoRefreshEnabled = false;
			StateHasChanged();
		}
		
		queryPageOptions = options;
		orderby.Clear();

		if (options.SortOrder != SortOrder.Unset)
		{
			orderby.Add(options.SortName + " " + options.SortOrder.ToString());
		}

		var result = await YZPortalApiClient.GetProductsAsync(pageSize: options.PageItems, pageNumber: options.PageIndex, searchString: options.SearchText, orderBy: orderby.ToArray());

		return await Task.FromResult(new QueryData<ProductDto>()
			{
				Items = result.Data,
				TotalCount = result.TotalItems,
				IsSorted = orderby.Any(),
				IsSearch = !string.IsNullOrEmpty(options.SearchText)
			});
	}

	private async Task<bool> OnDeleteAsync(IEnumerable<ProductDto> items)
	{
		var products = items.ToList();
		foreach (var product in products)
		{
			var response = await YZPortalApiClient.DeleteProductAsync(product.Id);

			if (response.Succeeded)
				Products?.Remove(product);
		}

		return await Task.FromResult(true);
	}
}