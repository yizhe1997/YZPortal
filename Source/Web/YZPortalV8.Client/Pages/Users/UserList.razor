@page "/users"
@using Application.Models.Identity;
@using Application.Models;
@using Domain.Enums.Memberships;
@using Microsoft.AspNetCore.Authorization;
@using System.Diagnostics.CodeAnalysis;
@using YZPortalV8.Client.Clients.YZPortalApi;
@using YZPortalV8.Client.Pages.Users;
@inject YZPortalApiHttpClient YZPortalApiClient
@inject DialogService DialogService
@attribute [Authorize(Policy = nameof(Role.Administrator))]
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Users</h1>
<div class="tabs-body-content">
    <Table TItem="UserModel"
           IsPagination="true"
           PageItemsSource="@PageItemsSource"
           IsBordered="true"
           ShowToolbar="true"
           ShowDefaultButtons="true"
           ShowDeleteButton="true"
           IsMultipleSelect="true"
           IsAutoRefresh="@IsTableAutoRefreshEnabled"
           AutoRefreshInterval=501
           ShowAddButton="false"
           ShowEditButton="false"
           ClickToSelect="true"
           ShowSearch="true"
           ShowFooter="true"
           ShowExtendButtons="true"
           ShowExtendEditButton="false"
           ShowExtendDeleteButton="false"
           TableSize="TableSize.Normal"
           OnDeleteAsync="@OnDeleteAsync"
           OnQueryAsync="@OnQueryAsync">
        <TableColumns>
            <TableColumn @bind-Field="@context.UserProfileImageUrl" Text="Profile Image" Width="120">
                <Template Context="value">
                    <ImageViewer Url="@value.Value" ShowPlaceHolder="true" HandleError="true" FitMode="ObjectFitMode.Contain">
                        <PlaceHolderTemplate>
                            <div class="d-flex">
                                <div>
                                    <img src="favicon.png" />
                                </div>
                            </div>
                        </PlaceHolderTemplate>
                        <ErrorTemplate>
                            <div class="d-flex">
                                Load failed
                            </div>
                        </ErrorTemplate>
                    </ImageViewer>
                </Template>
            </TableColumn>
            <TableColumn @bind-Field="@context.Email" Sortable="true" Text="Email" />
            <TableColumn @bind-Field="@context.DisplayName" Sortable="true" Text="Name" />
            <TableColumn @bind-Field="@context.AuthTime" Sortable="true" FormatString="yyyy-MM-dd" Text="Last logged-in" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton Color="Color.Primary" Icon="fa-solid fa-pen" Text="Edit" OnClick="() => OpenUserEditDialog(context)" />
        </RowButtonTemplate>
        <EditTemplate>
        </EditTemplate>
    </Table>
</div>

@code {
    private static IEnumerable<int> PageItemsSource => new int[] { 2, 4, 10 };

    private List<UserModel>? Users;

    public QueryPageOptions queryPageOptions { get; set; } = new();

    public bool IsTableAutoRefreshEnabled { get; set; }

    private async Task<Stream> GetImageStreamAsync()
    {
        return await Http.GetStreamAsync(
            "https://avatars.githubusercontent.com/u/9141961");
    }

    private async Task SetImageAsync2()
    {
        try
        {
            var imageStream = await GetImageStreamAsync();
            var dotnetImageStream = new DotNetStreamReference(imageStream);
            await JSRuntime.InvokeVoidAsync("setImage", "image", dotnetImageStream);
        }
        catch (JSException ex)
        {
            var m = ex.Message;
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task SetImageAsync(string imageUrl, Guid id)
    {
        var imageStream = await Http.GetStreamAsync(imageUrl);
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JSRuntime.InvokeVoidAsync("setImage", id.ToString(), dotnetImageStream);
    }

    private async Task OpenUserEditDialog(UserModel userModel)
    {
        var dialogOpt = new DialogOption()
            {
                ShowCloseButton = false,
                Title = "Edit User Details",
                Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(),
                Size = Size.Large
            };
        dialogOpt.Component = BootstrapDynamicComponent.CreateComponent<UserEditDialog>(new Dictionary<string, object?>
            {
                [nameof(UserEditDialog.User)] = userModel,
                [nameof(UserEditDialog.CloseDialog)] = EventCallback.Factory.Create<MouseEventArgs>(this, dialogOpt.CloseDialogAsync),
                // TODO: using autorefresh is not ideal, look for alternatives e,
                [nameof(UserEditDialog.RefreshParentComponentCallback)] = EventCallback.Factory.Create<bool>(this, () => IsTableAutoRefreshEnabled = true),
            });
        await DialogService.Show(dialogOpt);
    }

    private async Task<bool> OnValidSubmit(string? userSubId, IEnumerable<string?> SelectedGraphGroups, IEnumerable<string?> ExistingGraphGroups)
    {
        var userSubIds = new string[] { userSubId ?? string.Empty };

        // Add groups
        foreach (var selectdGraphGroup in SelectedGraphGroups.Except(ExistingGraphGroups))
        {
            await YZPortalApiClient.GraphGroupAddUsers(selectdGraphGroup, userSubIds);
        }

        // Remove groups
        foreach (var selectdGraphGroup in ExistingGraphGroups.Except(SelectedGraphGroups))
        {
            await YZPortalApiClient.GraphGroupRemoveUser(selectdGraphGroup, userSubId);
        }

        return await Task.FromResult(true);
    }

    private async Task<QueryData<UserModel>> OnQueryAsync(QueryPageOptions options)
    {
        // Reset flag
        if (IsTableAutoRefreshEnabled)
        {
            IsTableAutoRefreshEnabled = false;
            StateHasChanged();
        }
        queryPageOptions = options;

        var orderby = new List<string>();

        if (options.SortOrder != SortOrder.Unset)
        {
            orderby.Add(options.SortName + " " + options.SortOrder.ToString());
        }

        var result = await YZPortalApiClient.GetUsersAsync(pageSize: options.PageItems, pageNumber: options.PageIndex, searchString: options.SearchText, orderBy: orderby.ToArray());

        Users = result.Data;

        return await Task.FromResult(new QueryData<UserModel>()
            {
                Items = Users,
                TotalCount = result.TotalItems,
                IsSorted = orderby.Any(),
                IsSearch = !string.IsNullOrEmpty(options.SearchText)
            });
    }

    private async Task<bool> OnDeleteAsync(IEnumerable<UserModel> items)
    {
        var users = items.ToList();
        foreach (var user in users)
        {
            var response = await YZPortalApiClient.DeleteUserAsync(user.SubjectIdentifier);

            if (response.Succeeded)
                Users?.Remove(user);
        }

        return await Task.FromResult(true);
    }
}