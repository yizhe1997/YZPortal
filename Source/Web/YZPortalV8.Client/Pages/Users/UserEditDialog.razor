@using Application.Models;
@using Application.Requests.Users;
﻿@using BootstrapBlazor.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics.CodeAnalysis;
@using YZPortalV8.Client.Clients.YZPortalApi
@using GraphModel = Application.Models.Graph;
@using IdentityModel = Application.Models.Identity;

@inject YZPortalApiHttpClient YZPortalApiClient

<Row id="@nameof(UserEditDialog)" ItemsPerRow="ItemsPerRow.One">
    <Card CollapseIcon="fas fa-circle-info" HeaderText="Customer Info" IsShadow="true" IsCollapsible="true">
        <BodyTemplate>
            <GroupBox style="margin-top: 1.5rem;">
                <ValidateForm Model="@User">
                    <EditorForm TModel="IdentityModel.UserModel" AutoGenerateAllItem=false>
                        <FieldItems >
                            <CardUpload IsSingle="true"
                                TValue="string" 
                                ShowDownloadButton="true"
                                OnChange="@OnCardUpload" 
                                OnDelete="@(fileName => Task.FromResult(true))">
                            </CardUpload>
                            <div class="col-12">
                                <BootstrapInput @bind-Value="@User.UserName" IsDisabled="true" DisplayText="Email" ShowLabel="true" />
                            </div>
                            <div class="col-12">
                                <BootstrapInput @bind-Value="@User.DisplayName" DisplayText="Display Name" ShowLabel="true" />
                            </div>
                            <div class="col-12">
                                <BootstrapInput @bind-Value="@User.FirstName" DisplayText="First Name" ShowLabel="true" />
                            </div>
                            <div class="col-12">
                                <BootstrapInput @bind-Value="@User.LastName" DisplayText="Last Name" ShowLabel="true" />
                            </div>
                            <div class="col-12">
                                <BootstrapInput @bind-Value="@User.MobilePhone" DisplayText="MobilePhone" ShowLabel="true" />
                            </div>
                            <div class="col-12 row g-3">
                                <div class="col-12 col-sm-8">
                                    <MultiSelect ShowLabel="true" DisplayText="Roles" Items="@GraphGroups" @bind-Value="SelectedGraphGroups" />
                                </div>
                                <div class="col-12 col-sm-4 align-self-end">
                                    <Button Icon="fa-regular fa-trash-can" Text="Clear" OnClick="@ClearListItems" />
                                </div>
                            </div>
                        </FieldItems>
                        <Buttons>
                            <div class="text-end">
                                <Button disabled="@IsSubmitDisabled" OnClick="@Submit" ButtonType="ButtonType.Submit" Icon="fa-solid fa-floppy-disk" Text="Submit" />
                            </div>
                        </Buttons>
                    </EditorForm>
                </ValidateForm>
            </GroupBox>
        </BodyTemplate>
    </Card>
    <Card CollapseIcon="fas fa-shopping-cart" HeaderText="Orders" IsShadow="true" IsCollapsible="true">
        <BodyTemplate>
        </BodyTemplate>
    </Card>
</Row>

@code {
    // TODO: disable while graph details still loading
    public bool IsSubmitDisabled { get; set; } = true;
    private List<SelectedItem> GraphGroups { get; set; } = new List<SelectedItem>();
    private IEnumerable<string?> SelectedGraphGroups { get; set; } = Enumerable.Empty<string?>();
    private IEnumerable<string?> ExistingGraphGroups { get; set; } = Enumerable.Empty<string?>();
    private static long MaxFileLength  => 200 * 1024 * 1024;
    [Parameter]
    public EventCallback<MouseEventArgs> CloseDialog { get; set; }

    [Parameter]
    public IdentityModel.UserModel User { get; set; } = new IdentityModel.UserModel();

    [Parameter]
    public EventCallback<bool> RefreshParentComponentCallback { get; set; }

    private static List<SelectedItem> GenerateDataSource(List<GraphModel.GroupModel> source) => source.Select(i => new SelectedItem(i.Id, i.DisplayName ?? string.Empty)).ToList();

    private async Task OnCardUpload(UploadFile file)
    {
        if (file != null && file.File != null)
        {
            // 服务器端验证当文件大于 2MB 时提示文件太大信息
            if (file.Size > MaxFileLength)
            {
                // await ToastService.Information("Upload the file", "The file size is greater than 200MB");
                file.Code = 1;
                file.Error = "The file size is greater than 200MB";
            }
            else
            {
                // await SaveToFile(file);
            }
        }
    }

    private async Task OnFieldValueChanged()
    {
        IsSubmitDisabled = false;
    }

    private async Task Submit()
    {
        var userSubIds = new string[] { User.SubjectIdentifier ?? string.Empty };

        // Add groups
        foreach (var selectedGraphGroup in SelectedGraphGroups.Except(ExistingGraphGroups))
        {
            await YZPortalApiClient.GraphGroupAddUsers(selectedGraphGroup, userSubIds);
        }

        // Remove groups
        foreach (var selectedGraphGroup in ExistingGraphGroups.Except(SelectedGraphGroups))
        {
            await YZPortalApiClient.GraphGroupRemoveUser(selectedGraphGroup, User.SubjectIdentifier);
        }

        await YZPortalApiClient.UpdateUserAsync(User.SubjectIdentifier, new UpdateUserCommand()
        {
            DisplayName = User.DisplayName,
            FirstName = User.FirstName,
            LastName = User.LastName,
            MobilePhone = User.MobilePhone
        });

        // TODO: only invoke if successfully edit
        await RefreshParentComponentCallback.InvokeAsync(true);

        // await CloseDialog.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var graphGroups = await YZPortalApiClient.GetGraphGroups();
        this.GraphGroups = GenerateDataSource(graphGroups.Data);

        var selectedGraphGroups = await YZPortalApiClient.GetGraphGroups(User.SubjectIdentifier);
        this.SelectedGraphGroups = ExistingGraphGroups = selectedGraphGroups.Data.Select(x => x.Id).ToList();
    }

    private void ClearListItems()
    {
        SelectedGraphGroups = Enumerable.Empty<string?>();
    }
}